name: Android Kernel Builder

on:
    push:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y git build-essential libncurses5-dev bison flex libssl-dev libelf-dev bc python3 python3-dev make \
                      liblz4-tool make optipng device-tree-compiler libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc pwgen libswitch-perl policycoreutils \
                      minicom libxml-sax-base-perl libxml-simple-perl libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc bison gperf zlib1g-dev automake

            - name: Clone clang (prebuilt)
              run: |
                  git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 -b android11-mainline-release
                  echo PATH=$(pwd)/linux-x86/clang-r377782c/bin:$(echo $PATH) >> $GITHUB_ENV

            - name: Clone gcc (prebuilt)
              run: |
                  git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android11-mainline-release
                  git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android11-mainline-release
                  echo PATH=$(pwd)/aarch64-linux-android-4.9/bin:$(pwd)/arm-linux-androideabi-4.9/bin:$(echo $PATH) >> $GITHUB_ENV

            - name: Build kernel
              run: |
                  export ARCH=arm64
                  export SUBARCH=arm64
                  export CROSS_COMPILE=aarch64-linux-gnu-
                  make O=out ARCH=arm64 CC="clang" CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-androidkernel- CROSS_COMPILE_ARM32=arm-linux-androideabi- LD=lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf OBJSIZE=llvm-size STRIP=llvm-strip LDGOLD=aarch64-linux-gnu-ld.gold LLVM_AR=llvm-ar LLVM_DIS=llvm-dis CONFIG_THINLTO= gki_defconfig
                  make -j$(nproc --all) O=out ARCH=arm64 CC="clang" CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-androidkernel- CROSS_COMPILE_ARM32=arm-linux-androideabi- LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf OBJSIZE=llvm-size STRIP=llvm-strip LDGOLD=aarch64-linux-gnu-ld.gold LLVM_AR=llvm-ar LLVM_DIS=llvm-dis CONFIG_THINLTO=

            - name: Upload kernel (Image)
              uses: actions/upload-artifact@v4
              with:
                  if-no-files-found: ignore
                  name: Image
                  path: out/arch/arm64/boot/Image

            - name: Upload Kernel (Image.gz)
              uses: actions/upload-artifact@v4
              with:
                  if-no-files-found: ignore
                  name: Image.gz
                  path: out/arch/arm64/boot/Image.gz

            - name: Upload Kernel (Image.gz-dtb)
              uses: actions/upload-artifact@v4
              with:
                  if-no-files-found: ignore
                  name: Image.gz-dtb
                  path: out/arch/arm64/boot/Image.gz-dtb

            - name: Upload Kernel (dtbo.img)
              uses: actions/upload-artifact@v4
              with:
                  if-no-files-found: ignore
                  name: dtbo.img
                  path: out/arch/arm64/boot/dtbo.img

            - name: Upload Kernel (dtb)
              uses: actions/upload-artifact@v4
              with:
                  if-no-files-found: ignore
                  name: dtb
                  path: out/arch/arm64/boot/dtb

            - name: Upload output
              uses: actions/upload-artifact@v4
              with:
                  if-no-files-found: ignore
                  name: kernel-output
                  path: out/
 
